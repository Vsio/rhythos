package org.fife.ui.rsyntaxtextarea.modes;
/* The following code was generated by JFlex 1.4.3 on 5/28/13 5:10 PM */

/*
 * 04/27/2010
 *
 * HaxeTokenMaker.java - Scanner for Haxe.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */


import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Haxe.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated HaxeTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class HaxeTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\50\1\15"+
    "\1\20\1\1\1\50\1\52\1\7\2\54\1\23\1\43\1\42\1\31"+
    "\1\32\1\22\1\4\3\16\4\6\2\3\1\53\1\42\1\44\1\45"+
    "\1\47\1\51\1\20\1\72\1\73\1\5\1\74\1\30\1\26\1\1"+
    "\1\100\1\101\2\1\1\25\1\102\1\103\3\1\1\77\1\104\1\75"+
    "\1\105\1\76\1\1\1\24\2\1\1\54\1\11\1\54\1\46\1\2"+
    "\1\0\1\36\1\14\1\62\1\64\1\35\1\27\1\71\1\55\1\57"+
    "\1\1\1\61\1\37\1\66\1\13\1\63\1\56\1\1\1\34\1\40"+
    "\1\33\1\12\1\70\1\60\1\67\1\65\1\1\1\41\1\46\1\41"+
    "\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\2\1\4\1\5\3\2"+
    "\1\6\1\1\1\7\2\10\5\2\1\10\6\2\1\11"+
    "\1\2\5\10\23\2\1\12\1\13\5\12\1\14\3\12"+
    "\1\1\1\15\1\3\1\16\1\15\1\16\1\15\1\17"+
    "\1\15\1\2\1\4\1\20\1\0\1\4\5\2\2\6"+
    "\1\21\1\22\1\23\24\2\1\0\1\10\3\2\2\24"+
    "\30\2\1\25\10\0\1\1\1\16\1\0\2\17\1\2"+
    "\1\4\1\26\2\4\1\20\1\4\4\2\1\6\1\27"+
    "\1\6\1\0\1\30\54\2\1\30\2\2\1\30\1\2"+
    "\10\0\1\1\1\2\1\4\3\2\1\6\1\31\1\2"+
    "\1\30\1\2\1\30\1\32\1\2\1\33\24\2\1\30"+
    "\10\2\2\0\1\34\2\0\1\35\1\1\1\4\1\2"+
    "\1\6\21\2\1\30\10\2\4\0\1\1\1\4\1\2"+
    "\1\6\16\2\1\30\13\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u0276\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u0276\0\u0276"+
    "\0\u07ee\0\u0834\0\u087a\0\u0276\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0276\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0276"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u10f4\0\u10f4\0\u113a"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u0276\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554"+
    "\0\u0276\0\u0276\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u0460"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u0118\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u0276\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u10f4\0\u2648\0\u268e\0\u26d4\0\u0276\0\u271a"+
    "\0\u2760\0\u1324\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904"+
    "\0\u0276\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae"+
    "\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e"+
    "\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u0276\0\u3b9c\0\u0118\0\u3be2"+
    "\0\u3c28\0\u0118\0\u3c6e\0\u0118\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6"+
    "\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416"+
    "\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646"+
    "\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876"+
    "\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6"+
    "\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u29d6"+
    "\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u452e\0\u4e7a"+
    "\0\u4600\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294"+
    "\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4"+
    "\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\6\1\17\1\4"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\5\1\36"+
    "\1\37\1\40\1\41\1\42\2\22\1\43\1\22\1\44"+
    "\1\45\1\44\1\37\1\5\1\46\1\47\1\50\1\5"+
    "\1\51\1\52\1\53\3\5\1\54\1\5\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\10\71\1\72\12\71\1\73\3\71\1\74"+
    "\25\71\1\75\2\71\1\76\25\71\10\77\1\100\16\77"+
    "\1\101\25\77\1\102\2\77\1\103\25\77\7\4\2\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\5\4\2\0"+
    "\6\4\14\0\32\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\31\5\3\105\2\6\1\105\1\6\2\0\4\105\1\0"+
    "\1\6\1\0\1\105\3\0\1\105\1\106\2\107\1\110"+
    "\1\0\1\111\2\105\1\110\1\105\1\106\1\105\14\0"+
    "\7\105\1\107\7\105\1\107\14\105\1\112\1\113\1\105"+
    "\1\113\2\0\4\105\1\0\1\113\1\0\1\105\3\0"+
    "\1\114\1\106\2\107\1\110\1\0\1\111\2\105\1\110"+
    "\1\105\1\106\1\105\14\0\7\105\1\107\2\105\1\114"+
    "\4\105\1\107\11\105\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\115\1\5\14\0\31\5\7\116\1\117\1\120\1\121"+
    "\74\116\106\0\1\4\6\5\2\0\1\104\1\5\1\122"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\5\5\1\123\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\1\124\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\2\5\1\125\3\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\5\1\126\4\5\14\0\31\5\10\16"+
    "\1\127\1\130\3\16\1\131\70\16\21\0\1\20\106\0"+
    "\1\132\1\133\21\0\1\44\105\0\1\44\40\0\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\11\5\1\134\17\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\135\2\5\14\0"+
    "\2\5\1\136\26\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\137\1\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\1\140\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\141\2\5\14\0\6\5\1\142\22\5"+
    "\1\4\6\5\2\0\1\104\1\5\1\143\1\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\22\5\1\144\6\5\31\0\1\44\13\0\1\44\43\0"+
    "\2\111\1\0\1\111\7\0\1\111\67\0\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\5\1\145\4\5\14\0\1\146\7\5"+
    "\1\147\20\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\2\5\1\150"+
    "\3\5\14\0\31\5\1\4\6\5\2\0\1\104\1\5"+
    "\1\151\1\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\4\5\1\152\1\5\14\0\12\5\1\153\16\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\5\1\154\4\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\1\155\2\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\156\5\5"+
    "\14\0\3\5\1\157\25\5\43\0\1\44\1\0\1\44"+
    "\104\0\1\160\1\44\105\0\1\44\1\0\1\161\103\0"+
    "\1\44\4\0\1\44\33\0\1\4\6\5\2\0\1\104"+
    "\1\162\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\5\1\163\1\5\1\164\2\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\1\5\1\165\1\5\1\0"+
    "\1\5\1\0\1\4\3\0\3\5\1\166\1\5\2\0"+
    "\6\5\14\0\11\5\1\167\17\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\1\170\30\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\171\1\172\1\5\14\0\6\5\1\173"+
    "\22\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\13\5"+
    "\1\174\15\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\2\5\1\175"+
    "\3\5\14\0\6\5\1\166\1\5\1\176\20\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\3\5\1\142\2\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\5\1\177\4\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\6\5"+
    "\1\200\22\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\3\5\1\201"+
    "\2\5\14\0\10\5\1\202\20\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\10\5\1\203\20\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\204\2\5\14\0\6\5\1\205"+
    "\22\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\206\3\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\3\5\1\207"+
    "\2\5\14\0\31\5\1\4\6\5\2\0\1\104\1\5"+
    "\1\210\1\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\211\5\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\212\2\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\1\213\2\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\214\5\5\14\0\2\5\1\215\26\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\24\5\1\216"+
    "\4\5\10\71\1\0\12\71\1\0\3\71\1\0\25\71"+
    "\1\0\2\71\1\0\25\71\22\0\1\217\116\0\1\220"+
    "\23\0\1\221\61\0\1\222\132\0\1\223\25\0\10\77"+
    "\1\0\16\77\1\0\25\77\1\0\2\77\1\0\25\77"+
    "\33\0\1\224\23\0\1\225\61\0\1\226\132\0\1\227"+
    "\25\0\7\4\2\0\1\4\1\230\2\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\2\0\6\4\14\0\31\4"+
    "\7\105\2\0\4\105\1\0\1\105\1\0\1\105\3\0"+
    "\5\105\2\0\6\105\14\0\34\105\2\231\1\105\1\231"+
    "\2\0\4\105\1\0\1\231\1\0\1\105\3\0\5\105"+
    "\1\232\1\0\6\105\2\0\1\232\11\0\34\105\2\111"+
    "\1\105\1\111\2\0\4\105\1\0\1\111\1\0\1\105"+
    "\3\0\2\105\2\107\1\110\2\0\2\105\1\110\3\105"+
    "\14\0\7\105\1\107\7\105\1\107\14\105\2\112\1\105"+
    "\1\112\2\0\4\105\1\0\1\112\1\0\1\105\3\0"+
    "\2\105\2\107\1\110\1\0\1\111\2\105\1\110\3\105"+
    "\14\0\7\105\1\107\7\105\1\107\14\105\1\112\1\113"+
    "\1\105\1\113\2\0\4\105\1\0\1\113\1\0\1\105"+
    "\3\0\1\105\1\233\2\107\1\110\1\0\1\111\2\105"+
    "\1\110\1\105\1\233\1\105\14\0\7\105\1\107\7\105"+
    "\1\107\14\105\4\234\2\0\3\105\1\234\1\0\1\234"+
    "\1\0\1\105\3\0\2\105\3\234\2\0\2\105\2\234"+
    "\2\105\14\0\5\105\1\234\1\105\1\234\5\105\3\234"+
    "\11\105\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\235\2\5"+
    "\14\0\31\5\7\236\1\237\1\0\75\236\7\0\1\237"+
    "\76\0\4\236\1\240\1\236\1\241\1\242\1\0\1\116"+
    "\1\243\3\116\1\240\10\236\1\116\3\236\2\116\51\236"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\244\5\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\2\5\1\245"+
    "\26\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\246\1\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\3\5\1\166\25\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\247\3\5\14\0\31\5\11\127\1\250\3\127\1\251"+
    "\74\127\1\16\1\127\2\16\1\0\1\16\1\252\4\16"+
    "\10\127\1\16\3\127\2\16\51\127\23\0\1\253\62\0"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\4\5\1\254\1\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\11\5"+
    "\1\255\17\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\5\5\1\256"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\6\5\1\257\22\5\1\4\6\5\2\0\1\104\1\5"+
    "\1\260\1\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\261\1\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\5\1\166\4\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\1\262\2\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\263\3\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\1\264\2\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\265\2\5\14\0"+
    "\10\5\1\166\20\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\266\4\5\14\0\2\5\1\267\26\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\1\5\1\270\27\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\271\5\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\1\272\2\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\5\5\1\273\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\274\5\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\14\5\1\275\14\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\1\5\1\276"+
    "\27\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\277\2\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\2\5\1\300\26\5\45\0\1\44\1\0\1\22\36\0"+
    "\1\4\6\5\2\0\1\104\2\5\1\301\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\2\5\1\302"+
    "\26\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\5\5"+
    "\1\303\23\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\304\3\5"+
    "\1\305\1\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\1\5\1\306\27\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\2\5\1\307\26\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\310\3\5\1\311\1\312\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\313\2\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\1\5\1\314\1\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\2\5\1\315"+
    "\3\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\3\5\1\316\1\5"+
    "\2\0\6\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\1\5\1\317\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\5\1\320\4\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\6\5\1\321\22\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\322\5\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\1\5\1\323\1\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\1\5\1\324"+
    "\27\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\325\1\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\2\5\1\326\26\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\3\5\1\327\1\5"+
    "\2\0\6\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\5\5\1\330\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\331\5\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\332\3\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\330\5\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\4\5\1\321\1\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\5\1\333\4\5\14\0\7\5\1\334"+
    "\21\5\1\4\6\5\2\0\1\104\1\5\1\335\1\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\1\5\1\256"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\31\5\56\0\1\336\66\0\1\337\101\0"+
    "\1\340\132\0\1\341\103\0\1\342\66\0\1\343\101\0"+
    "\1\344\132\0\1\345\25\0\3\4\4\346\2\0\3\4"+
    "\1\346\1\0\1\346\1\0\1\4\3\0\2\4\3\346"+
    "\2\0\2\4\2\346\2\4\14\0\5\4\1\346\1\4"+
    "\1\346\5\4\3\346\11\4\3\105\2\231\1\105\1\231"+
    "\2\0\4\105\1\0\1\231\1\0\1\105\3\0\2\105"+
    "\2\107\1\105\2\0\6\105\14\0\7\105\1\107\7\105"+
    "\1\107\11\105\3\0\2\231\1\0\1\231\7\0\1\231"+
    "\67\0\3\105\4\234\2\0\3\105\1\234\1\0\1\234"+
    "\1\0\1\105\3\0\1\105\1\233\3\234\2\0\2\105"+
    "\2\234\1\233\1\105\14\0\5\105\1\234\1\105\1\234"+
    "\5\105\3\234\11\105\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\5\5"+
    "\1\347\14\0\31\5\7\236\1\117\1\0\101\236\1\241"+
    "\1\236\1\241\1\237\1\0\5\236\1\241\73\236\1\116"+
    "\1\236\1\116\1\237\1\0\5\236\1\116\72\236\4\350"+
    "\1\117\1\0\3\236\1\350\1\236\1\350\7\236\3\350"+
    "\4\236\2\350\23\236\1\350\1\236\1\350\5\236\3\350"+
    "\11\236\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\10\5"+
    "\1\351\20\5\1\4\6\5\2\0\1\104\1\5\1\352"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\166\1\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\353\2\5\14\0\31\5\10\127\1\0\100\127"+
    "\4\354\2\127\1\250\2\127\1\354\1\251\1\354\7\127"+
    "\3\354\4\127\2\354\23\127\1\354\1\127\1\354\5\127"+
    "\3\354\11\127\22\0\1\355\63\0\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\20\5\1\60\10\5\1\4\6\5"+
    "\2\0\1\104\2\5\1\356\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\357\5\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\256\2\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\5\5\1\360\23\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\5\5\1\264\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\11\5\1\361"+
    "\17\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\14\5"+
    "\1\357\14\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\2\5\1\362"+
    "\3\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\5\5\1\363\23\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\6\5\1\125\22\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\5\5\1\364\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\2\5\1\365\3\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\1\366\2\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\11\5\1\166\17\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\166\3\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\367\3\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\1\370\2\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\371\3\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\372\5\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\310\5\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\4\5\1\372"+
    "\1\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\13\5\1\373\15\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\4\5\1\374\24\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\2\5\1\375\3\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\2\5\1\376\26\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\4\5\1\377\1\5\14\0\6\5"+
    "\1\u0100\22\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\4\5\1\273"+
    "\1\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\5\5\1\u0101\23\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\u0102\1\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\364\1\5\1\166\3\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\5\5\1\u0103\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\u0104\5\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\5\1\u0105\4\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\u0106\2\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\u0107\2\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\3\5\1\u0108"+
    "\2\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\357\1\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\u0109\3\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\u010a\2\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\357\3\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\1\u010b\2\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\7\5\1\357\21\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\4\5\1\u010c\1\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\1\357"+
    "\30\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\23\5"+
    "\1\63\1\u010d\4\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\u010e\4\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\2\5\1\u010f\26\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\20\5\1\u0110\10\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\14\5\1\u0111\14\5\53\0"+
    "\1\u0112\67\0\1\336\126\0\1\u0113\61\0\1\u0114\126\0"+
    "\1\u0115\67\0\1\342\126\0\1\u0116\61\0\1\u0117\53\0"+
    "\3\4\4\u0118\2\0\3\4\1\u0118\1\0\1\u0118\1\0"+
    "\1\4\3\0\2\4\3\u0118\2\0\2\4\2\u0118\2\4"+
    "\14\0\5\4\1\u0118\1\4\1\u0118\5\4\3\u0118\12\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\5\5\1\357\14\0\31\5\3\236"+
    "\4\u0119\1\117\1\0\3\236\1\u0119\1\236\1\u0119\7\236"+
    "\3\u0119\4\236\2\u0119\23\236\1\u0119\1\236\1\u0119\5\236"+
    "\3\u0119\11\236\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\1\5\1\u011a\27\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\14\5\1\166\14\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\4\5\1\166\24\5\3\127\4\u011b\2\127"+
    "\1\250\2\127\1\u011b\1\251\1\u011b\7\127\3\u011b\4\127"+
    "\2\u011b\23\127\1\u011b\1\127\1\u011b\5\127\3\u011b\11\127"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\7\5\1\u011c"+
    "\21\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\u011d\5\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\21\5"+
    "\1\u011e\7\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\2\5\1\364"+
    "\3\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\7\5\1\u011f\21\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\5\1\u0120\4\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\1\5\1\u0121\1\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\5\1\u0120\4\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\11\5\1\u0122"+
    "\17\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\364\4\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\2\5\1\u0123\26\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\3\5"+
    "\1\u0124\2\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\u0125\2\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\5\1\u0126\4\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\1\5\1\273\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\u0127\3\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\5\1\u0128\4\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\1\166"+
    "\30\5\1\4\6\5\2\0\1\104\2\5\1\u0129\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\5\5\1\166\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\2\5"+
    "\1\u012a\26\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\5\1\u012b"+
    "\4\5\14\0\31\5\1\4\6\5\2\0\1\104\1\u012c"+
    "\2\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\11\5\1\372\17\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\10\5\1\u012d\20\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\20\5\1\u012e\10\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\11\5\1\u012f\17\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\u0130\3\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\u0131\3\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\u0132\5\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\u0133\2\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\1\5\1\u0134"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\10\5\1\u0135\20\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\324\1\5\14\0\31\5\22\0\1\u0136\123\0"+
    "\1\336\12\0\1\u0112\33\0\1\u0114\1\u0137\4\u0114\1\u0137"+
    "\2\0\3\u0114\1\0\1\u0114\1\0\1\u0137\1\0\1\u0114"+
    "\1\u0137\5\u0114\2\u0137\6\u0114\1\0\2\u0137\1\0\1\u0137"+
    "\2\0\5\u0137\31\u0114\22\0\1\u0138\123\0\1\342\12\0"+
    "\1\u0115\33\0\1\u0117\1\u0139\4\u0117\1\u0139\2\0\3\u0117"+
    "\1\0\1\u0117\1\0\1\u0139\1\0\1\u0117\1\u0139\5\u0117"+
    "\2\u0139\6\u0117\1\0\2\u0139\1\0\1\u0139\2\0\5\u0139"+
    "\31\u0117\3\4\4\u013a\2\0\3\4\1\u013a\1\0\1\u013a"+
    "\1\0\1\4\3\0\2\4\3\u013a\2\0\2\4\2\u013a"+
    "\2\4\14\0\5\4\1\u013a\1\4\1\u013a\5\4\3\u013a"+
    "\11\4\3\236\4\u013b\1\117\1\0\3\236\1\u013b\1\236"+
    "\1\u013b\7\236\3\u013b\4\236\2\u013b\23\236\1\u013b\1\236"+
    "\1\u013b\5\236\3\u013b\11\236\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\u013c\3\5\14\0\31\5\3\127\4\u013d\2\127"+
    "\1\250\2\127\1\u013d\1\251\1\u013d\7\127\3\u013d\4\127"+
    "\2\u013d\23\127\1\u013d\1\127\1\u013d\5\127\3\u013d\11\127"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\357\2\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\2\5"+
    "\1\u013e\26\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\3\5\1\u013f"+
    "\2\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\u0140\3\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\1\5\1\166\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\7\5\1\u0103\21\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\u0141\3\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\5\5\1\166\23\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\273\5\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\14\5\1\273"+
    "\14\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\3\5\1\u0142\1\5\2\0\6\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\11\5\1\u0143\17\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\166"+
    "\5\5\14\0\31\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\3\5"+
    "\1\u0144\2\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\1\5\1\u0145\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\2\5\1\u0146\26\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\4\5\1\u0128\1\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\15\5\1\u0147\13\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\6\5\1\u0148"+
    "\22\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\2\5"+
    "\1\u0149\26\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\5\5\1\256\23\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\u014a\3\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\2\5\1\u0111\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\u014b\5\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\14\5\1\u014c\14\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\1\5\1\u014d\27\5\22\0"+
    "\1\u0114\105\0\1\u0117\63\0\3\4\4\5\2\0\3\4"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\2\4\3\5"+
    "\2\0\2\4\2\5\2\4\14\0\5\4\1\5\1\4"+
    "\1\5\5\4\3\5\11\4\3\236\4\116\1\117\1\0"+
    "\3\236\1\116\1\236\1\116\7\236\3\116\4\236\2\116"+
    "\23\236\1\116\1\236\1\116\5\236\3\116\11\236\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\7\5\1\166\21\5"+
    "\3\127\4\16\2\127\1\250\2\127\1\16\1\251\1\16"+
    "\7\127\3\16\4\127\2\16\23\127\1\16\1\127\1\16"+
    "\5\127\3\16\11\127\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\6\5\1\u0120\22\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\u014e\1\5\14\0\31\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\3\5"+
    "\1\166\1\5\2\0\6\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\1\5\1\u014f\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\3\5\1\u0150\2\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\u0151\3\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\5\5"+
    "\1\353\23\5\1\4\6\5\2\0\1\104\1\273\2\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\31\5\1\4\6\5\2\0\1\104\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\14\0"+
    "\7\5\1\273\21\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\14\0\5\5\1\u0152\23\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\6\5\1\u0153\22\5\1\4\6\5\2\0"+
    "\1\104\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\5\5\1\357\23\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\5\1\357\4\5\14\0\31\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\6\5\1\u014a\22\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\14\0\16\5\1\u0154"+
    "\1\5\1\u012e\10\5\1\4\6\5\2\0\1\104\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\347\3\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\1\324\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\267\5\5\14\0\31\5\1\4\6\5\2\0\1\104"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\14\0\5\5\1\273\23\5\1\4\6\5\2\0"+
    "\1\104\1\5\1\u0155\1\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\14\0\31\5\1\4\6\5"+
    "\2\0\1\104\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\14\0\5\5\1\u0156\23\5\1\4"+
    "\6\5\2\0\1\104\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\4\5\1\347\1\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\1\u0157\2\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\u0103\5\5\14\0\31\5"+
    "\1\4\6\5\2\0\1\104\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\235\3\5\14\0"+
    "\31\5\1\4\6\5\2\0\1\104\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\3\5\1\357\1\5\2\0\6\5"+
    "\14\0\31\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\6\1\1\11\4\1\1\11\17\1\2\11\3\1"+
    "\1\11\25\1\1\11\5\1\1\11\16\1\1\11\1\0"+
    "\10\1\2\11\25\1\1\0\36\1\1\11\10\0\2\1"+
    "\1\0\4\1\1\11\11\1\1\11\1\1\1\0\62\1"+
    "\10\0\7\1\1\11\44\1\2\0\1\1\2\0\37\1"+
    "\4\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public HaxeTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HaxeTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HaxeTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 30: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 31: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 25: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 19: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 35: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 36: break;
        case 23: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 37: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 38: break;
        case 20: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 27: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 45: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 46: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 47: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 48: break;
        case 16: 
          { addToken(Token.ERROR_CHAR);
          }
        case 49: break;
        case 26: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 50: break;
        case 17: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 10: 
          { 
          }
        case 57: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 344: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 345: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 346: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
